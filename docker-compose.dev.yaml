services:
  db:
    image: postgres:15
    container_name: starburger_db_dev
    restart: "always"
    environment:
      POSTGRES_DB: starburger
      POSTGRES_USER: starburger
      POSTGRES_PASSWORD: starburger
    volumes:
      - db_data_dev:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U starburger"]
      interval: 5s
      timeout: 5s
      retries: 5

  web:
    build: ./backend
    command: sh -c "python manage.py collectstatic --noinput --clear && gunicorn star_burger.wsgi:application --bind 0.0.0.0:8000"
    environment:
      - PYTHONPATH=/app
    volumes:
      - static_vol_dev:/app/staticfiles
      - ./media:/app/media
      - frontend_vol_dev:/app/bundles
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      frontend:
        condition: service_started
    restart: "always"

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile.dev
    container_name: nginx-1_dev
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/conf.d/default.conf:ro
      - frontend_vol_dev:/var/www/frontend:ro
      - ./media:/var/www/media:ro
      - static_vol_dev:/var/www/static:ro
    depends_on:
      - web
    restart: always

  frontend:
    build:
      context: ./frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - frontend_vol_dev:/app/bundles
    command: ["./node_modules/.bin/parcel", "watch", "bundles-src/index.js", "--dist-dir", "bundles", "--public-url", "./"]

volumes:
  db_data_dev:
  frontend_vol_dev:
    driver: local
  static_vol_dev:
    driver: local
