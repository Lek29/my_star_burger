networks:
  app-net:
    driver: bridge

volumes:
  db_data:
  frontend_dist_vol:
    driver: local
  static_files_vol:
    driver: local
  certbot_conf_vol:
  certbot_www_vol:

services:
  db:
    image: postgres:15
    container_name: starburger_db
    restart: always
    environment:
      POSTGRES_DB: starburger
      POSTGRES_USER: starburger
      POSTGRES_PASSWORD: starburger
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U starburger"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks: [app-net]

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: backend
    command: >
      sh -c "python manage.py migrate --noinput &&
             python manage.py collectstatic --noinput &&
             gunicorn star_burger.wsgi:application --bind 0.0.0.0:8000 --workers 3"
    environment:
      - PYTHONPATH=/app
    volumes:
      - static_files_vol:/app/staticfiles
      - ./media:/app/media
      - frontend_dist_vol:/bundles
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    restart: always
    networks: [app-net]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/admin/login/"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  nginx:
    build: ./nginx
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/conf.d/default.conf:ro
      - certbot_conf_vol:/etc/letsencrypt
      - certbot_www_vol:/var/www/certbot
      - static_files_vol:/var/www/static:ro
      - ./media:/var/www/media:ro
    depends_on:
      - backend
    restart: always
    networks: [app-net]

