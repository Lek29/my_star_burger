services:
  db:
    image: postgres:15
    container_name: starburger_db
    restart: always
    environment:
      POSTGRES_DB: starburger
      POSTGRES_USER: starburger
      POSTGRES_PASSWORD: starburger
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U starburger"]
      interval: 5s
      timeout: 5s
      retries: 5

  web:
    build: ./backend
    command: gunicorn star_burger.wsgi:application --bind 0.0.0.0:8000
    environment:
      - PYTHONPATH=/app
    volumes:
      - static_vol:/app/staticfiles
      - ./media:/app/media
      - frontend_vol:/app/bundles
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      frontend:
        condition: service_started
    restart:
      always

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx-1
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - frontend_vol:/var/www/frontend:ro
      - ./media:/var/www/media:ro
      - static_vol:/var/www/static:ro
      - certbot_vol:/etc/ssl:ro
      - certbot_vol_www:/var/www/certbot:ro
    depends_on:
      - web
    restart:
      always

  frontend:
    build:
      context: ./frontend
    working_dir: /app
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - frontend_vol:/app/bundles
    command: ["npm", "run", "build"]

  certbot:
    image: certbot/certbot
    container_name: certbot-1
    volumes:
      - certbot_vol:/etc/ssl
      - certbot_vol_www:/var/www/certbot
    command: /bin/sh -c 'trap exit TERM; while :; do sleep 12h & wait $!; certbot renew --webroot -w /var/www/certbot --post-hook "docker kill -s HUP nginx-1" || true; done;'

    depends_on:
      - nginx
    restart: unless-stopped

volumes:
  db_data:
  frontend_vol:
    driver: local
  static_vol:
    driver: local
  certbot_vol:
    driver: local
  certbot_vol_www:
    driver: local


