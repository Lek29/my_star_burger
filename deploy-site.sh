#!/bin/bash
# deploy_site.sh: Скрипт для сборки и запуска основного сайта (без SSL).
# Использует docker-compose.prod.yaml

set -euo pipefail # Строгий режим: завершение при любой ошибке

# --- НАСТРОЙКИ ---
DOMAIN="lek29.ru"
DOCKER_COMPOSE_FILE="docker-compose.prod.yaml"

# Функция для вызова Docker Compose V2
compose() {
    sudo docker compose --file "$DOCKER_COMPOSE_FILE" "$@"
}

# --------------------------------------------------------
# 0. Подготовка и Очистка
# --------------------------------------------------------
echo "--- 0. ПОДГОТОВКА: Очистка старых контейнеров и обновление кода ---"
# Остановка системного Nginx (если он запущен) для освобождения порта 80
echo "   > ОСВОБОЖДАЕМ ПОРТ 80: Остановка системного Nginx..."
sudo systemctl stop nginx || true

# Остановка и удаление ВСЕХ старых контейнеров проекта
compose down --volumes --remove-orphans

# Получение свежего кода
echo "   > Обновление кода из Git..."
git pull

# --------------------------------------------------------
# 1. Сборка Docker-образов
# --------------------------------------------------------
echo "--- 1. СБОРКА: Создание новых Docker-образов (Backend, Frontend) ---"
compose build

# --------------------------------------------------------
# 2. Запуск Продакшен-среды (без Certbot, Nginx работает на HTTP)
# --------------------------------------------------------
echo "--- 2. ЗАПУСК: Подъем всех продакшен-сервисов (db, web, nginx, frontend) ---"
# Мы поднимаем все сервисы, включая Nginx.
# Nginx на этом этапе использует HTTP-конфиг, который слушает порт 80.
compose up -d --remove-orphans

# --------------------------------------------------------
# 3. Сборка фронтенда (Parcel) - Роль: Программист (Архитектор)
# --------------------------------------------------------
echo "--- 3. ФРОНТЕНД: Сборка статических бандлов Parcel ---"
# Эта команда собирает JS/CSS и помещает их в том starburger_frontend_dist_vol
compose run --rm frontend npx parcel build bundles-src/index.js --public-url /bundles/ --dist-dir dist --no-source-maps

# --------------------------------------------------------
# 4. Выполнение миграций и сбор статики - Роль: Программист (Архитектор)
# --------------------------------------------------------
echo "--- 4. БЭКЕНД: Выполнение миграций БД и сбор статики Django ---"
# Ждем, пока база данных будет готова (compose up заботится о здоровье контейнера db)
compose exec -T web python manage.py migrate --noinput
# Копируем статические файлы в том starburger_static_files_vol
compose exec -T web python manage.py collectstatic --noinput

# --------------------------------------------------------
# 5. Перезагрузка Nginx - Роль: DevOps-инженер
# --------------------------------------------------------
echo "--- 5. ПЕРЕЗАГРУЗКА NGINX: Применение новой статики и бандлов ---"
# Убиваем Nginx сигналом HUP, чтобы он перечитал конфигурацию и статику.
compose kill -s HUP nginx || true

echo -e "\n--------------------------------------------------------"
echo -e "✅ Установка сайта завершена!"
echo -e "Сайт должен быть доступен по адресу http://$DOMAIN"
echo -e "--------------------------------------------------------"
